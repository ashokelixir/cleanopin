receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  
  prometheus:
    config:
      scrape_configs:
        - job_name: 'cleanarch-api'
          static_configs:
            - targets: ['api:8080']
          metrics_path: '/metrics'
          scrape_interval: 15s

processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048
  
  memory_limiter:
    limit_mib: 512
    check_interval: 1s
  
  resource:
    attributes:
      - key: service.name
        value: cleanarch-template
        action: upsert
      - key: service.version
        value: 1.0.0
        action: upsert
      - key: deployment.environment
        value: development
        action: upsert

exporters:
  # Jaeger for traces (using OTLP)
  otlp/jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true
  
  # Prometheus for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      service: cleanarch-template
  
  # Console exporter for debugging
  logging:
    loglevel: info
  
  # OTLP exporter (can be used for Datadog or other OTLP-compatible backends)
  otlp/datadog:
    endpoint: https://api.datadoghq.com
    headers:
      DD-API-KEY: "${DD_API_KEY}"
    tls:
      insecure: false

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  
  pprof:
    endpoint: 0.0.0.0:1777
  
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [otlp/jaeger, logging]
    
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, logging]
    
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [logging]

  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888