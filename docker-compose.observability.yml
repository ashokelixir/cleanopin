version: '3.8'

services:
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: cleanarch-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check extension
    depends_on:
      - jaeger
      - prometheus
    networks:
      - cleanarch-network
    restart: unless-stopped
    # Health check disabled for distroless container
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: cleanarch-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
      - "9411:9411"   # Zipkin
    networks:
      - cleanarch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: cleanarch-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cleanarch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: cleanarch-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - cleanarch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Datadog Agent (optional - for production use)
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: cleanarch-datadog-agent
    environment:
      - DD_API_KEY=${DD_API_KEY:-your-datadog-api-key}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_HOSTNAME=cleanarch-docker
      - DD_TAGS=env:development,service:cleanarch-template
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_DOCKER_LABELS_AS_TAGS=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE="name:cleanarch-datadog-agent"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /opt/datadog-agent/run:/opt/datadog-agent/run:rw
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    ports:
      - "8126:8126" # APM traces
    networks:
      - cleanarch-network
    restart: unless-stopped
    profiles:
      - datadog

  # Application with observability configuration
  api:
    environment:
      # OpenTelemetry Configuration
      - OTEL_SERVICE_NAME=cleanarch-template
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=cleanarch-template,service.version=1.0.0,deployment.environment=development
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      
      # Application Telemetry Configuration
      - OpenTelemetry__ServiceName=cleanarch-template
      - OpenTelemetry__ServiceVersion=1.0.0
      - OpenTelemetry__OtlpEndpoint=http://otel-collector:4317
      - OpenTelemetry__EnableConsoleExporter=false
      - OpenTelemetry__EnableOtlpExporter=true
      
      # Datadog Configuration (when using Datadog profile)
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_ENV=development
      - DD_SERVICE=cleanarch-template
      - DD_VERSION=1.0.0
      - DD_TRACE_ENABLED=true
      - DD_RUNTIME_METRICS_ENABLED=true
      - DD_LOGS_INJECTION=true
      
      # Health Check Configuration
      - HealthChecks__Enabled=true
      - HealthChecks__DetailedErrors=true
    depends_on:
      - otel-collector
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cleanarch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16