version: '3.8'

services:
  # Application with production observability
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    container_name: cleanarch-api-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      
      # Database Configuration
      - ConnectionStrings__DefaultConnection=${DATABASE_CONNECTION_STRING}
      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING}
      
      # JWT Configuration
      - Jwt__SecretKey=${JWT_SECRET_KEY}
      - Jwt__Issuer=${JWT_ISSUER:-CleanArchTemplate}
      - Jwt__Audience=${JWT_AUDIENCE:-CleanArchTemplate}
      - Jwt__AccessTokenExpirationMinutes=${JWT_EXPIRATION_MINUTES:-60}
      
      # OpenTelemetry Configuration
      - OTEL_SERVICE_NAME=cleanarch-template
      - OTEL_SERVICE_VERSION=${APP_VERSION:-1.0.0}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=cleanarch-template,service.version=${APP_VERSION:-1.0.0},deployment.environment=production
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      
      # Application Telemetry Configuration
      - OpenTelemetry__ServiceName=cleanarch-template
      - OpenTelemetry__ServiceVersion=${APP_VERSION:-1.0.0}
      - OpenTelemetry__OtlpEndpoint=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - OpenTelemetry__EnableConsoleExporter=false
      - OpenTelemetry__EnableOtlpExporter=true
      
      # Datadog Configuration
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_ENV=production
      - DD_SERVICE=cleanarch-template
      - DD_VERSION=${APP_VERSION:-1.0.0}
      - DD_TRACE_ENABLED=true
      - DD_RUNTIME_METRICS_ENABLED=true
      - DD_LOGS_INJECTION=true
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_SERVICE_MAPPING=postgresql:cleanarch-db,redis:cleanarch-cache,sqs:cleanarch-queue
      - DD_TRACE_SAMPLE_RATE=${DD_TRACE_SAMPLE_RATE:-1.0}
      
      # Logging Configuration
      - Serilog__MinimumLevel__Default=Information
      - Serilog__MinimumLevel__Override__Microsoft=Warning
      - Serilog__MinimumLevel__Override__System=Warning
      - Serilog__MinimumLevel__Override__Microsoft.EntityFrameworkCore=Warning
      
      # Health Check Configuration
      - HealthChecks__Enabled=true
      - HealthChecks__DetailedErrors=false
      
      # AWS Configuration (if using AWS services)
      - AWS__Region=${AWS_REGION:-us-east-1}
      - AWS__AccessKey=${AWS_ACCESS_KEY}
      - AWS__SecretKey=${AWS_SECRET_KEY}
      
      # Messaging Configuration
      - Messaging__AwsRegion=${AWS_REGION:-us-east-1}
      - Messaging__LocalStackEndpoint=${SQS_ENDPOINT}
      
    ports:
      - "8080:8080"
    networks:
      - cleanarch-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "com.datadoghq.ad.logs=[{\"source\":\"csharp\",\"service\":\"cleanarch-template\"}]"
      - "com.datadoghq.ad.check_names=[\"http_check\"]"
      - "com.datadoghq.ad.init_configs=[{}]"
      - "com.datadoghq.ad.instances=[{\"name\":\"cleanarch-api\",\"url\":\"http://%%host%%:8080/health\",\"timeout\":10}]"

  # Datadog Agent for production monitoring
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: cleanarch-datadog-agent
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_HOSTNAME=${DD_HOSTNAME:-cleanarch-production}
      - DD_TAGS=env:production,service:cleanarch-template,version:${APP_VERSION:-1.0.0}
      
      # APM Configuration
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_APM_RECEIVER_SOCKET=/opt/datadog-agent/run/apm.socket
      
      # Process Monitoring
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_SYSTEM_PROBE_ENABLED=true
      
      # Log Collection
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_LOGS_CONFIG_AUTO_MULTI_LINE_DETECTION=true
      
      # Container Monitoring
      - DD_DOCKER_LABELS_AS_TAGS=true
      - DD_CONTAINER_EXCLUDE="name:cleanarch-datadog-agent"
      
      # Network Monitoring
      - DD_SYSTEM_PROBE_NETWORK_ENABLED=true
      
      # Security Monitoring
      - DD_RUNTIME_SECURITY_CONFIG_ENABLED=true
      - DD_COMPLIANCE_CONFIG_ENABLED=true
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /opt/datadog-agent/run:/opt/datadog-agent/run:rw
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - /sys/kernel/debug:/sys/kernel/debug
    ports:
      - "8126:8126" # APM traces
      - "8125:8125/udp" # DogStatsD
    networks:
      - cleanarch-network
    restart: unless-stopped
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYS_PTRACE
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
      - IPC_LOCK
      - CHOWN
    pid: host

  # NGINX reverse proxy with observability
  nginx:
    image: nginx:alpine
    container_name: cleanarch-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - cleanarch-network
    restart: unless-stopped
    labels:
      - "com.datadoghq.ad.logs=[{\"source\":\"nginx\",\"service\":\"cleanarch-nginx\"}]"
      - "com.datadoghq.ad.check_names=[\"nginx\"]"
      - "com.datadoghq.ad.init_configs=[{}]"
      - "com.datadoghq.ad.instances=[{\"nginx_status_url\":\"http://%%host%%:80/nginx_status\"}]"

networks:
  cleanarch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16