// <auto-generated />
using System;
using CleanArchTemplate.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchTemplate.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(201)
                        .HasColumnType("character varying(201)")
                        .HasComputedColumnSql("\"Resource\" || '.' || \"Action\"", true);

                    b.Property<Guid?>("ParentPermissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_Permissions_Action");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Permissions_Category");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Permissions_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Permissions_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Name");

                    b.HasIndex("ParentPermissionId")
                        .HasDatabaseName("IX_Permissions_ParentPermissionId");

                    b.HasIndex("Resource")
                        .HasDatabaseName("IX_Permissions_Resource");

                    b.HasIndex("Action", "IsActive")
                        .HasDatabaseName("IX_Permissions_Action_IsActive");

                    b.HasIndex("Category", "IsActive")
                        .HasDatabaseName("IX_Permissions_Category_IsActive");

                    b.HasIndex("Resource", "Action")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Resource_Action");

                    b.HasIndex("Resource", "IsActive")
                        .HasDatabaseName("IX_Permissions_Resource_IsActive");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.PermissionAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime>("PerformedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_PermissionAuditLogs_Action");

                    b.HasIndex("PerformedAt")
                        .HasDatabaseName("IX_PermissionAuditLogs_PerformedAt");

                    b.HasIndex("PerformedBy")
                        .HasDatabaseName("IX_PermissionAuditLogs_PerformedBy");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_PermissionAuditLogs_PermissionId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_PermissionAuditLogs_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PermissionAuditLogs_UserId");

                    b.HasIndex("Action", "PerformedAt")
                        .HasDatabaseName("IX_PermissionAuditLogs_Action_PerformedAt");

                    b.HasIndex("PermissionId", "PerformedAt")
                        .HasDatabaseName("IX_PermissionAuditLogs_PermissionId_PerformedAt");

                    b.HasIndex("UserId", "PerformedAt")
                        .HasDatabaseName("IX_PermissionAuditLogs_UserId_PerformedAt");

                    b.ToTable("PermissionAuditLogs", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_RefreshTokens_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_ExpiresAt");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("IX_RefreshTokens_IsRevoked");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Roles_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Roles_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_RolePermissions_CreatedAt");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_RolePermissions_PermissionId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RolePermissions_RoleId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_RolePermissions_RoleId_PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("{}");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("IX_Tenants_Identifier");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Tenants_IsActive");

                    b.HasIndex("IsActive", "SubscriptionExpiresAt")
                        .HasDatabaseName("IX_Tenants_IsActive_SubscriptionExpiresAt");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.TenantConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsSystemConfiguration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsSystemConfiguration")
                        .HasDatabaseName("IX_TenantConfigurations_IsSystemConfiguration");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_TenantConfigurations_TenantId");

                    b.HasIndex("TenantId", "Key")
                        .IsUnique()
                        .HasDatabaseName("IX_TenantConfigurations_TenantId_Key");

                    b.ToTable("TenantConfigurations", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.TenantUsageMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("{}");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RecordedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("{}");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<double>("Value")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("MetricName")
                        .HasDatabaseName("IX_TenantUsageMetrics_MetricName");

                    b.HasIndex("RecordedAt")
                        .HasDatabaseName("IX_TenantUsageMetrics_RecordedAt");

                    b.HasIndex("RecordedBy")
                        .HasDatabaseName("IX_TenantUsageMetrics_RecordedBy");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_TenantUsageMetrics_TenantId");

                    b.HasIndex("TenantId", "MetricName")
                        .HasDatabaseName("IX_TenantUsageMetrics_TenantId_MetricName");

                    b.HasIndex("TenantId", "RecordedAt")
                        .HasDatabaseName("IX_TenantUsageMetrics_TenantId_RecordedAt");

                    b.HasIndex("TenantId", "MetricName", "RecordedAt")
                        .HasDatabaseName("IX_TenantUsageMetrics_TenantId_MetricName_RecordedAt");

                    b.ToTable("TenantUsageMetrics", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmailVerificationToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("LastLoginAt")
                        .HasDatabaseName("IX_Users_LastLoginAt");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserPermissions_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_UserPermissions_ExpiresAt");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_UserPermissions_PermissionId");

                    b.HasIndex("State")
                        .HasDatabaseName("IX_UserPermissions_State");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserPermissions_UserId");

                    b.HasIndex("UserId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserPermissions_UserId_PermissionId");

                    b.HasIndex("UserId", "State", "ExpiresAt")
                        .HasDatabaseName("IX_UserPermissions_UserId_State_ExpiresAt");

                    b.ToTable("UserPermissions", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_UserRoles_CreatedAt");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_UserId_RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.Permission", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Permission", "ParentPermission")
                        .WithMany("ChildPermissions")
                        .HasForeignKey("ParentPermissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentPermission");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.PermissionAuditLog", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchTemplate.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CleanArchTemplate.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.Role", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Tenant", null)
                        .WithMany("Roles")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchTemplate.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.TenantConfiguration", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.TenantUsageMetric", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.User", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Tenant", null)
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CleanArchTemplate.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_Email");

                            b1.ToTable("Users", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchTemplate.Domain.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("CleanArchTemplate.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchTemplate.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.Permission", b =>
                {
                    b.Navigation("ChildPermissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CleanArchTemplate.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
